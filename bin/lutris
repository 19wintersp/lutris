#!/usr/bin/python
# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-
# Copyright (C) 2010 Mathieu Comandon <strycore@gmail.com>
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3, as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranties of
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.

"""Program entry point"""

import os
import sys
import optparse

# pylint: disable=E0611
from gi.repository import Gtk

from os.path import realpath, dirname, normpath

LAUNCH_PATH = dirname(realpath(__file__))
if LAUNCH_PATH != "/usr/bin":
    SOURCE_PATH = normpath(os.path.join(LAUNCH_PATH, '..'))
    sys.path.insert(0, SOURCE_PATH)

from lutris.constants import CONFIG_EXTENSION, GAME_CONFIG_PATH
from lutris.util import log
#from lutris.installer import Installer
from lutris.config import check_config
from lutris.gui.lutriswindow3 import LutrisWindow

log.logger.name = "Lutris"

#def new_lutris_window():
#    """ Returns an instantiated LutrisWindow object. """
#    ui_filename = os.path.join(DATA_PATH, 'ui', 'LutrisWindow.ui')
#    if not os.path.exists(ui_filename):
#        msg = 'File %s not found' % ui_filename
#        log.logger.error(msg)
#        raise IOError(msg)
#    builder = gtk.Builder()
#    builder.add_from_file(ui_filename)
#    window = builder.get_object("lutris_window")
#    window.finish_initializing(builder, DATA_PATH)
#    return window


# Support for command line options.
parser = optparse.OptionParser(version="%prog %ver")
parser.add_option("-v", "--verbose", action="store_true",
                  dest="verbose", help="Verbose output")
parser.add_option("-d", "--debug", action="store_true",
                  dest="debug", help="Show debug messages")
parser.add_option("-i", "--install", dest="installer_file",
                  help="Install a game from a yml file")
parser.add_option("-n", "--no-download",
                  action="store_true", dest="no_download",
                  help="Don't download anything when installing")
(options, args) = parser.parse_args()

# Set the logging level to show debug messages.
if options.debug:
    log.logger.setLevel(log.logging.DEBUG)
    log.logger.debug('logging enabled')
else:
    log.logger.setLevel(log.logging.INFO)
if options.verbose:
    log.logger.info("Verbose mode enabled")
    console = log.logging.StreamHandler()
    if options.debug:
        console.setLevel(log.logging.DEBUG)
    else:
        console.setLevel(log.logging.INFO)

    fmt = '%(name)-12s: %(levelname)-8s %(message)s'
    formatter = log.logging.Formatter(fmt)
    console.setFormatter(formatter)
    log.logger.addHandler(console)

#check_config(force_wipe=True)
check_config(force_wipe=False)

installer = False
game = None
if options.installer_file:
    if not os.path.exists(options.installer_file):
        log.logger.error("Unable to find installer at : %s"
                         % options.installer_file)
        exit()
    else:
        game, _ = os.path.splitext(options.installer_file)
        installer = os.path.abspath(options.installer_file)
        print "Installing game from %s" % installer


# Run the application.
for arg in args:
    if arg.startswith('lutris:'):
        game = arg[7:]
        break
if game is not None:
    if isinstance(game, str):
        file_path = os.path.join(GAME_CONFIG_PATH,
                                 game + CONFIG_EXTENSION)
    else:
        file_path = None
    if file_path is not None and os.path.exists(file_path):
        import lutris.game
        log.logger.info('Launching ' + game)
        lutris_game = lutris.game.LutrisGame(game)
        lutris_game.play()
    else:
        log.logger.debug('Installing %s' % game)
        #installer = Installer(game, installer)
        Gtk.gdk.threads_enter()
        Gtk.main()
        Gtk.gdk.threads_leave()
else:
    lutris_window = LutrisWindow()
    #Gtk.gdk.threads_enter()
    Gtk.main()
    #Gtk.gdk.threads_leave()
