#!/usr/bin/python2
# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-
# Copyright (C) 2010 Mathieu Comandon <strycore@gmail.com>
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3, as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranties of
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.

"""Program entry point"""

import os
import sys
import logging
import optparse
import signal

# pylint: disable=E0611
from gi.repository import Gtk, Gdk, GObject

from os.path import realpath, dirname, normpath

LAUNCH_PATH = dirname(realpath(__file__))
if LAUNCH_PATH != "/usr/bin":
    SOURCE_PATH = normpath(os.path.join(LAUNCH_PATH, '..'))
    sys.path.insert(0, SOURCE_PATH)

from lutris.gui.dialogs import QuestionDialog

try:
    import yaml as _yaml
except ImportError:
    q = QuestionDialog({'title': "Dependency not available",
                        'question': "PythonYAML is not installed,\n"
                                    "do you want to install it now?"})
    if q.result == Gtk.ResponseType.YES:
        os.system('software-center python-yaml')
    else:
        sys.exit()

from lutris.constants import CONFIG_EXTENSION, GAME_CONFIG_PATH
from lutris.util.log import logger
from lutris.installer import InstallerDialog
from lutris.config import check_config, register_handler
from lutris.game import LutrisGame
from lutris.pga import get_games
from lutris.gui.lutriswindow import LutrisWindow


# Support for command line options.
parser = optparse.OptionParser(version="%prog %ver")
parser.add_option("-v", "--verbose", action="store_true",
                  dest="verbose", help="Verbose output")
parser.add_option("-d", "--debug", action="store_true",
                  dest="debug", help="Show debug messages")
parser.add_option("-i", "--install", dest="installer_file",
                  help="Install a game from a yml file")
parser.add_option("-l", "--list-games", action="store_true",
                  help="List all games in database")
parser.add_option("-s", "--list-steam", action="store_true",
                  help="List Steam (Windows) games")
parser.add_option("--reinstall", action="store_true", help="Reinstall game")
(options, args) = parser.parse_args()

# Set the logging level to show debug messages.
console = logging.StreamHandler()
fmt = '%(levelname)-8s %(asctime)s [%(module)s]:%(message)s'
formatter = logging.Formatter(fmt)
console.setFormatter(formatter)
logger.addHandler(console)
logger.setLevel(logging.ERROR)

if options.verbose:
    logger.info("Verbose mode enabled")
    logger.setLevel(logging.INFO)
if options.debug:
    logger.setLevel(logging.DEBUG)
    logger.debug('logging enabled')
if options.list_games:
    print get_games()
    exit()
if options.list_steam:
    from lutris.runners.steam import steam
    steam_runner = steam()
    print steam_runner.get_appid_list()
    exit()


check_config(force_wipe=False)

installer = False
game = None

signal.signal(signal.SIGINT, signal.SIG_DFL)
GObject.threads_init()
Gdk.threads_init()

register_handler()

game_slug = []
for arg in args:
    if arg.startswith('lutris:'):
        game_slug = arg[7:]
        break

if game_slug or options.installer_file:
    file_path = os.path.join(GAME_CONFIG_PATH, game_slug + CONFIG_EXTENSION)
    if os.path.exists(file_path) and not options.reinstall:
        lutris_game = LutrisGame(game_slug)
        lutris_game.play()
    else:
        InstallerDialog(options.installer_file or game_slug)
        Gtk.main()
else:
    LutrisWindow()
    Gtk.main()
